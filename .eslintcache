[{"C:\\Users\\PC\\Documents\\voting\\src\\App.js":"1","C:\\Users\\PC\\Documents\\voting\\src\\reportWebVitals.js":"2","C:\\Users\\PC\\Documents\\voting\\src\\index.js":"3","C:\\Users\\PC\\Documents\\voting\\src\\pages\\VoteDetail\\index.tsx":"4","C:\\Users\\PC\\Documents\\voting\\src\\pages\\VoteUpdate\\index.tsx":"5","C:\\Users\\PC\\Documents\\voting\\src\\pages\\VoteList\\index.tsx":"6","C:\\Users\\PC\\Documents\\voting\\src\\routes\\index.tsx":"7","C:\\Users\\PC\\Documents\\voting\\src\\modules\\main.tsx":"8","C:\\Users\\PC\\Documents\\voting\\src\\modules\\index.tsx":"9","C:\\Users\\PC\\Documents\\voting\\src\\components\\common.tsx":"10","C:\\Users\\PC\\Documents\\voting\\src\\pages\\VoteWrite\\index.tsx":"11"},{"size":528,"mtime":1610369084226,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1610369084226,"results":"14","hashOfConfig":"13"},{"size":815,"mtime":1610435651650,"results":"15","hashOfConfig":"13"},{"size":169,"mtime":1610371938416,"results":"16","hashOfConfig":"13"},{"size":169,"mtime":1610371937940,"results":"17","hashOfConfig":"13"},{"size":2608,"mtime":1610434927116,"results":"18","hashOfConfig":"13"},{"size":763,"mtime":1610434381682,"results":"19","hashOfConfig":"13"},{"size":548,"mtime":1610379662816,"results":"20","hashOfConfig":"13"},{"size":214,"mtime":1610380329047,"results":"21","hashOfConfig":"13"},{"size":201,"mtime":1610514064753,"results":"22","hashOfConfig":"13"},{"size":8863,"mtime":1610522263362,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1a1wcsm",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"43"},"C:\\Users\\PC\\Documents\\voting\\src\\App.js",[],"C:\\Users\\PC\\Documents\\voting\\src\\reportWebVitals.js",[],"C:\\Users\\PC\\Documents\\voting\\src\\index.js",[],["51","52"],"C:\\Users\\PC\\Documents\\voting\\src\\pages\\VoteDetail\\index.tsx",[],["53","54"],"C:\\Users\\PC\\Documents\\voting\\src\\pages\\VoteUpdate\\index.tsx",[],["55","56"],"C:\\Users\\PC\\Documents\\voting\\src\\pages\\VoteList\\index.tsx",[],"C:\\Users\\PC\\Documents\\voting\\src\\routes\\index.tsx",[],"C:\\Users\\PC\\Documents\\voting\\src\\modules\\main.tsx",[],["57","58"],"C:\\Users\\PC\\Documents\\voting\\src\\modules\\index.tsx",[],"C:\\Users\\PC\\Documents\\voting\\src\\components\\common.tsx",[],"C:\\Users\\PC\\Documents\\voting\\src\\pages\\VoteWrite\\index.tsx",["59"],"import { Button, Grid, IconButton, InputAdornment, InputLabel, OutlinedInput, TextField, Typography } from '@material-ui/core';\r\nimport React, { ChangeEvent, useCallback, useState } from 'react';\r\nimport { Container } from '../../components/common';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst VoteWrite: React.FC = () => {\r\n    const history = useHistory();\r\n    const [title, setTitle] = useState(\"\");\r\n    const [content, setContent] = useState(\"\");\r\n    const now = new Date();\r\n    const tomorrow = new Date();\r\n    now.setTime(now.getTime()+3600000*9); // 현재한국현지시간\r\n    tomorrow.setTime(now.getTime()+3600000*24); // 내일한국현지시간\r\n    const [startDateTime, setStartDateTime] = useState(now.toISOString().substr(0, 19));\r\n    const [finishDateTime, setFinishDateTime] = useState(tomorrow.toISOString().substr(0, 19));\r\n    const [options, setOptions] = useState([\"\",\"\",\"\"]);\r\n    const handleChangeTitle = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    };\r\n    const handleChangeContent = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        setContent(e.currentTarget.value)\r\n    };\r\n    const handleChangeStartDateTime = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        const startDateTime = e.currentTarget.value;\r\n        if(finishDateTime<startDateTime){\r\n            alert(\"종료시간보다 이후시간를 선택하실 수 없습니다.\")\r\n        }else{\r\n            setStartDateTime(startDateTime)\r\n        }\r\n    };\r\n    const handleChangeFinishDateTime = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        const finishDateTime = e.currentTarget.value;\r\n        if(finishDateTime<startDateTime){\r\n            alert(\"시작시간보다 이전시간를 선택하실 수 없습니다.\")\r\n        }else{\r\n            setFinishDateTime(e.currentTarget.value)\r\n        }\r\n    };\r\n    const handleChangeOption = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        const index = Number(e.currentTarget.name);\r\n        const value = e.currentTarget.value;\r\n        setOptions(options => {\r\n            const newOptions = [...options]\r\n            newOptions[index] = value;\r\n            return newOptions;\r\n        });\r\n    };\r\n    const handleClickAddOption = () => {\r\n        setOptions(options => options.concat([\"\"]));\r\n    };\r\n    const handleClickRemoveOption = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        const index = Number(e.currentTarget.name);\r\n        setOptions(options => {\r\n            const newOptions = [...options]\r\n            newOptions.splice(index,1)\r\n            return newOptions;\r\n        })\r\n    };\r\n    const handleClickCancel = () => {\r\n        if(window.confirm(\"정말 취소하시겠습니까?\")){\r\n            history.push(\"/\");\r\n        }\r\n    };\r\n    const handleClickSave = () => {\r\n        if(validation()){\r\n            \r\n        }\r\n    };\r\n    const validation = () => {\r\n        if(title===\"\"){\r\n            alert(\"제목이 입력되지 않았습니다.\");\r\n            return false;\r\n        }else if(startDateTime===\"\"){\r\n            alert(\"시작일시가 입력되지 않았습니다.\");\r\n            return false;\r\n        }else if(finishDateTime===\"\"){\r\n            alert(\"종료일시가 입력되지 않았습니다.\");\r\n            return false;\r\n        }else if(options.filter(value=>value===\"\").length>0){\r\n            alert(\"입력되지 않은 옵션이 있습니다.\")\r\n        }else if(new Set(options).size !== options.length){\r\n            alert(\"내용이 중복된 옵션이 있습니다.\")\r\n        }\r\n        return true;\r\n    };\r\n    return (\r\n        <Container>\r\n            <Grid container direction={\"column\"} justify={\"flex-start\"} alignItems={\"stretch\"}>\r\n                <Grid item style={{padding:\"30px 0px\"}}>\r\n                    <Typography variant={\"h4\"}>\r\n                        투표 등록\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item container direction={\"column\"} justify={\"flex-start\"} alignItems={\"stretch\"} style={{gap:8}}>\r\n                    <Grid item>\r\n                        <InputLabel shrink>\r\n                            제목\r\n                        </InputLabel>\r\n                        <TextField value={title} onChange={handleChangeTitle} fullWidth variant={\"outlined\"}/>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <InputLabel shrink>\r\n                            내용\r\n                        </InputLabel>\r\n                        <TextField value={content} onChange={handleChangeContent} fullWidth variant={\"outlined\"} multiline rows={5} rowsMax={5}/>\r\n                    </Grid>\r\n                    <Grid item container spacing={2}>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <InputLabel shrink>\r\n                                시작일시\r\n                            </InputLabel>\r\n                            <TextField\r\n                                type=\"datetime-local\"\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                value={startDateTime}\r\n                                onChange={handleChangeStartDateTime}\r\n                                InputLabelProps={{\r\n                                shrink: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <InputLabel shrink>\r\n                                종료일시\r\n                            </InputLabel>\r\n                            <TextField\r\n                                type=\"datetime-local\"\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                value={finishDateTime}\r\n                                onChange={handleChangeFinishDateTime}\r\n                                InputLabelProps={{\r\n                                shrink: true,\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <InputLabel shrink>\r\n                            옵션\r\n                        </InputLabel>\r\n                        <Grid container direction={\"column\"} justify={\"flex-start\"} alignItems={\"stretch\"} style={{gap:8}}>\r\n                            {\r\n                                options.map((option:string, index:number)=>{\r\n                                    return (\r\n                                        <Grid item key={index}>\r\n                                            <OutlinedInput\r\n                                            fullWidth\r\n                                            endAdornment={\r\n                                                <InputAdornment position=\"end\">\r\n                                                    <IconButton\r\n                                                        edge=\"end\"\r\n                                                        name={`${index}`}\r\n                                                        onClick={handleClickRemoveOption}\r\n                                                    >\r\n                                                        <DeleteIcon />\r\n                                                    </IconButton>\r\n                                                </InputAdornment>\r\n                                            }\r\n                                            value={option}\r\n                                            name={`${index}`}\r\n                                            onChange={handleChangeOption}\r\n                                            />\r\n                                        </Grid>\r\n                                    )\r\n                                })\r\n                            }\r\n                            <Grid item>\r\n                                <Button onClick={handleClickAddOption} fullWidth variant={\"outlined\"}>\r\n                                    추가하기\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item container direction=\"row\" justify=\"flex-end\" style={{padding:\"30px 0px\", gap:8}}>\r\n                    <Button onClick={handleClickCancel} variant={\"outlined\"}>취소</Button>\r\n                    <Button onClick={handleClickSave} variant={\"outlined\"}>저장</Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default VoteWrite;",{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"60","replacedBy":"64"},{"ruleId":"62","replacedBy":"65"},{"ruleId":"60","replacedBy":"66"},{"ruleId":"62","replacedBy":"67"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"68","severity":1,"message":"69","line":2,"column":30,"nodeType":"70","messageId":"71","endLine":2,"endColumn":41},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],["72"],["73"],["72"],["73"],"@typescript-eslint/no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]